// Code generated by "tfplugingen -gen datasource -type dataHTTP"; DO NOT EDIT.

package provider

import (
	terraformpluginsdk "github.com/hashicorp/terraform-plugin-sdk"
	errors "github.com/pkg/errors"
	cty "github.com/zclconf/go-cty/cty"
	gocty "github.com/zclconf/go-cty/cty/gocty"
)

func (r *dataHTTP) Schema() terraformpluginsdk.Schema {
	return terraformpluginsdk.Schema{Block: terraformpluginsdk.Block{Attributes: []terraformpluginsdk.Attribute{terraformpluginsdk.Attribute{
		Computed:  false,
		ForceNew:  false,
		Name:      "url",
		Optional:  false,
		Required:  true,
		Sensitive: false,
		Type:      cty.String,
	}, terraformpluginsdk.Attribute{
		Computed:  false,
		ForceNew:  false,
		Name:      "request_headers",
		Optional:  true,
		Required:  false,
		Sensitive: false,
		Type:      cty.Map(cty.String),
	}, terraformpluginsdk.Attribute{
		Computed:  true,
		ForceNew:  false,
		Name:      "body",
		Optional:  false,
		Required:  false,
		Sensitive: false,
		Type:      cty.String,
	}}}}
}
func (r *dataHTTP) UnmarshalState(conf cty.Value) error {
	var err error
	_ = err
	if !conf.IsNull() && conf.IsKnown() {
		if !conf.GetAttr("url").IsNull() && conf.GetAttr("url").IsKnown() {
			err = gocty.FromCtyValue(conf.GetAttr("url"), &r.URL)
			if err != nil {
				return errors.WithStack(err)
			}
		}
		if !conf.GetAttr("request_headers").IsNull() && conf.GetAttr("request_headers").IsKnown() {
			err = gocty.FromCtyValue(conf.GetAttr("request_headers"), &r.RequestHeaders)
			if err != nil {
				return errors.WithStack(err)
			}
		}
		if !conf.GetAttr("body").IsNull() && conf.GetAttr("body").IsKnown() {
			err = gocty.FromCtyValue(conf.GetAttr("body"), &r.Body)
			if err != nil {
				return errors.WithStack(err)
			}
		}
	}
	return nil
}
func (r *dataHTTP) MarshalState() (cty.Value, error) {
	var err error
	_ = err
	var state cty.Value
	{
		state1 := map[string]cty.Value{}
		{
			state1["url"], err = gocty.ToCtyValue(r.URL, cty.String)
			if err != nil {
				return cty.NilVal, errors.WithStack(err)
			}
		}
		{
			state1["request_headers"], err = gocty.ToCtyValue(r.RequestHeaders, cty.Map(cty.String))
			if err != nil {
				return cty.NilVal, errors.WithStack(err)
			}
		}
		{
			state1["body"], err = gocty.ToCtyValue(r.Body, cty.String)
			if err != nil {
				return cty.NilVal, errors.WithStack(err)
			}
		}
		state = cty.ObjectVal(state1)
	}
	return state, nil
}
