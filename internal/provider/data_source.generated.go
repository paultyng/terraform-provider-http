// Code generated by "tfplugingen -gen datasource -type dataHTTP"; DO NOT EDIT.

package provider

import (
	terraformpluginsdk "github.com/hashicorp/terraform-plugin-sdk"
	cty "github.com/zclconf/go-cty/cty"
)

func (r *dataHTTP) Schema() terraformpluginsdk.Schema {
	return terraformpluginsdk.Schema{Block: terraformpluginsdk.Block{Attributes: []terraformpluginsdk.Attribute{terraformpluginsdk.Attribute{
		Computed: false,
		Name:     "url",
		Optional: false,
		Required: true,
		Type:     cty.String,
	}, terraformpluginsdk.Attribute{
		Computed: false,
		Name:     "request_headers",
		Optional: true,
		Required: false,
		Type:     cty.Map(cty.String),
	}, terraformpluginsdk.Attribute{
		Computed: true,
		Name:     "body",
		Optional: false,
		Required: false,
		Type:     cty.String,
	}}}}
}
func (r *dataHTTP) PopulateConfig(conf cty.Value) error {
	var v cty.Value
	v = conf.GetAttr("url")
	if v.IsNull() {
		r.URL = ""
	} else {
		r.URL = urlAttribute(v.AsString())
	}
	v = conf.GetAttr("request_headers")
	if v.IsNull() {
		r.RequestHeaders = nil
	} else {
		vm := v.AsValueMap()
		r.RequestHeaders = make(map[string]string, len(vm))
		for k, vmv := range vm {
			r.RequestHeaders[k] = vmv.AsString()
		}
	}
	return nil
}
func (r *dataHTTP) SaveState() (cty.Value, error) {
	state := map[string]cty.Value{}
	state["url"] = cty.StringVal(string(r.URL))
	if r.RequestHeaders == nil {
		state["request_headers"] = cty.MapValEmpty(cty.String)
	} else {
		values := map[string]cty.Value{}
		for k, v := range r.RequestHeaders {
			values[k] = cty.StringVal(v)
		}
		state["request_headers"] = cty.MapVal(values)
	}
	state["body"] = cty.StringVal(r.Body)
	return cty.ObjectVal(state), nil
}
